;;; -*- lexical-binding: t; -*-
#+TITLE: Emacs Config
#+AUTHOR: Jake Waksbaum
#+TOC: true

* Setup
** Timing
   Write a message saying how long startup took.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "Emacs ready in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))
   #+END_SRC

** Garbage Collection
   Make startup faster by reducing the frequency of garbage collection.
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold most-positive-fixnum)
   #+END_SRC
** Init files
   It's convenient to be able to get at this quickly.
   #+BEGIN_SRC emacs-lisp
     (defvar jakemaks/init-file "~/.emacs.d/lisp/config.org")

     (defun jakemaks/find-init-file ()
       "Edit the init file in the current buffer."
       (interactive)
       (find-file jakemaks/init-file))
   #+END_SRC

** Package repositories
   Get packages from ELPA and MELPAby default. This can be customized
   (e.g. to use a local checkout of =spacemacs-elpa-mirror= by
   customizing =package-archives=).
   #+BEGIN_SRC emacs-lisp
     (setq package-archives
           '(("gnu" . "https://elpa.gnu.org/packages/")
             ("melpa" . "https://melpa.org/packages/")
             ("marmalade" . "https://marmalade-repo.org/packages/")))
   #+END_SRC

   Install =use-package= if not yet installed.
   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (package-initialize)
       (unless (package-installed-p 'use-package)
         (package-refresh-contents)
         (package-install 'use-package)))
   #+END_SRC

  Disable package initialize. We usually don't need it because packages
  are installed at compile time.
  #+BEGIN_SRC emacs-lisp
    (setq package-enable-at-startup nil)
  #+END_SRC

  Ask =package.el= note to touch our =init.el=.
  #+BEGIN_SRC emacs-lisp
    (setq package--init-file-ensured t)
  #+END_SRC

  Set =use-package-verbose= to ='t= for interpreted and to =nil= for
  byte-compiled.
  #+BEGIN_SRC emacs-lisp
    (eval-and-compile
      (setq use-package-verbose
            (not (bound-and-true-p byte-compile-current-file))))
  #+END_SRC

  Add the macro generated list of package.el loadpaths to load-path.
  #+BEGIN_SRC emacs-lisp
    (setq package-user-dir "~/.emacs.d/elpa")
    (mapc #'(lambda (add) (add-to-list 'load-path add))
          (eval-when-compile
            (setq use-package-always-ensure t)
            (let ((package-user-dir-real (file-truename package-user-dir)))
              ;; The reverse is necessary, because outside we mapc
              ;; add-to-list element-by-element, which reverses.
              (nreverse (apply #'nconc
                               ;; Only keep package.el provided loadpaths.
                               (mapcar #'(lambda (path)
                                           (if (string-prefix-p package-user-dir-real (file-truename path))
                                               (list path)
                                              nil))
                                       load-path))))))
  #+END_SRC

  =use-package= uses =diminish= and =bind-key=.
  #+BEGIN_SRC emacs-lisp
    (use-package diminish)
    (use-package bind-key)
  #+END_SRC
** Custom settings load file
   Create an =init-custom.el= to store customizations. This will not be tracked by git.
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/custom.el")
     (unless (file-exists-p custom-file)
       (with-temp-buffer
         (write-file custom-file)))
     (load-file custom-file)
   #+END_SRC

* Preferences
  Always use lexical binding.
  #+BEGIN_SRC emacs-lisp
    (setq lexical-binding 't)
  #+END_SRC

  Use UTF-8 encoding.
  #+BEGIN_SRC emacs-lisp
    (prefer-coding-system 'utf-8-unix)
  #+END_SRC

  Don't show the start-up screen. Right to business.
  #+BEGIN_SRC emacs-lisp
    '(inhibit-startup-screen t)
  #+END_SRC

  On  I use ⌘ as meta and prefer ⌥ to do nothing so I can still insert
  special characters like easily.
  #+BEGIN_SRC emacs-lisp
    (setq mac-command-modifier 'meta
          mac-option-modifier 'none)
  #+END_SRC

  Wrap lines.
  #+BEGIN_SRC emacs-lisp
    (diminish 'visual-line-mode)
    (global-visual-line-mode 1)
  #+END_SRC

  Turn off unwanted window decoration.
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+END_SRC

  Disable error bell.
  #+BEGIN_SRC emacs-lisp
    (customize-set-variable 'ring-bell-function 'ignore)
  #+END_SRC

  Shorten yes-or-no prompt to y-or-n.
  #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  Put all temporary and backup files in a central location.
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
          backup-by-copying t    ; Don't delink hardlinks
          version-control t      ; Use version numbers on backups
          delete-old-versions t  ; Automatically delete excess backups
          kept-new-versions 20   ; how many of the newest versions to keep
          kept-old-versions 5    ; and how many of the old
          )
  #+END_SRC

  Save cursor position between sessions
  #+BEGIN_SRC emacs-lisp
    (save-place-mode)
  #+END_SRC

  Save history between sessions.
  #+BEGIN_SRC emacs-lisp
    (savehist-mode 1)
  #+END_SRC

  Replace highlighted text with type.
  #+BEGIN_SRC emacs-lisp
    (delete-selection-mode 1)
  #+END_SRC

  Delete trailing whitespace before saving.
  #+BEGIN_SRC emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
  #+END_SRC

  Make all scripts executable by default
  #+BEGIN_SRC emacs-lisp
    (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
  #+END_SRC

* Evil
** Packages
   Use =evil-mode= to emulate Vim keybindings in Emacs.
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config (evil-mode 1))
   #+END_SRC

   Use =general= to setup our own keybindings.
   #+BEGIN_SRC emacs-lisp
     (use-package general
       :config
       (general-evil-setup t))
   #+END_SRC

   ~fd~ will take you from insert mode to normal mode, like ~ESC~.
   #+BEGIN_SRC emacs-lisp
     (use-package evil-escape
       :commands (evil-escape-pre-command-hook)
       :init (add-hook 'pre-command-hook 'evil-escape-pre-command-hook)
       :custom
       (evil-escape-key-sequence "fd"))
   #+END_SRC

   Easily surround things with parentheses, brackets, quotes, etc.
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :config
       (global-evil-surround-mode 1))
   #+END_SRC

** State modes
   I prefer not to clobber the default bindings with evil bindings in some modes.
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'evil-emacs-state-modes 'dired-mode)
  (add-to-list 'evil-emacs-state-modes 'proced-mode)
  (add-to-list 'evil-emacs-state-modes 'eshell-mode)
  (add-to-list 'evil-emacs-state-modes 'term-mode)
  (add-to-list 'evil-emacs-state-modes 'diff-mode)
  (add-to-list 'evil-emacs-state-modes 'vc-mode)
   #+END_SRC

** Keyboard mappings
*** Leader key
   Use =SPC= for leader key.
   #+BEGIN_SRC emacs-lisp
     (defvar jakemaks/leader-key "SPC"
       "Leader key in the style of vim.")

     (general-create-definer leader-def
       :states '(normal visual)
       :prefix jakemaks/leader-key)

     (general-define-key
      :states 'motion
      ;; swap ; and :
      ";" 'evil-ex
      ":" 'evil-repeat-find-char)

     (leader-def
       "SPC" 'counsel-M-x
       "/" 'comment-region
       "\\\\" 'uncomment-region
       "." 'jakemaks/find-init-file
       "W" 'toggle-truncate-lines
       "X" 'delete-reload-whitespace
       "qq" 'kill-emacs)
   #+END_SRC

*** Window management
  #+BEGIN_SRC emacs-lisp
    (defun toggle-maximize-buffer ()
      "Maximize buffer"
      (interactive)
      (if (and (= 1 (length (window-list)))
               (assoc ?_ register-alist))
          (jump-to-register ?_)
        (progn
          (window-configuration-to-register ?_)
          (delete-other-windows))))

    (winner-mode)

    (leader-def
      :infix "w"
      "" '(:ignore t :which-key "windows")
      "l" 'evil-window-right
      "h" 'evil-window-left
      "k" 'evil-window-up
      "j" 'evil-window-down
      "/" 'split-window-right
      "-" 'split-window-below
      "m" 'toggle-maximize-buffer
      "d" 'delete-window
      "u" 'winner-undo
      "U" 'winner-redo
      )
  #+END_SRC

*** File management
    #+BEGIN_SRC emacs-lisp
      (defun jakemaks/rename-current-buffer-file ()
        "Renames current buffer and file it is visiting."
        (interactive)
        (let* ((name (buffer-name))
               (filename (buffer-file-name)))
          (if (not (and filename (file-exists-p filename)))
              (error "Buffer '%s' is not visiting a file!" name)
            (let* ((dir (file-name-directory filename))
                   (new-name (read-file-name "New name: " dir)))
              (cond ((get-buffer new-name)
                     (error "A buffer named '%s' already exists!" new-name))
                    (t
                     (let ((dir (file-name-directory new-name)))
                       (when (and (not (file-exists-p dir)) (yes-or-no-p (format "Create directory '%s'?" dir)))
                         (make-directory dir t)))
                     (rename-file filename new-name 1)
                     (rename-buffer new-name)
                     (set-visited-file-name new-name)
                     (set-buffer-modified-p nil)
                     (when (fboundp 'recentf-add-file)
                       (recentf-add-file new-name)
                       (recentf-remove-if-non-kept filename))
                     (message "File '%s' successfully renamed to '%s'" name (file-name-nondirectory new-name))))))))

      (defun jakemaks/delete-current-buffer-file ()
        "Removes file connected to current buffer and kills buffer."
        (interactive)
        (let ((filename (buffer-file-name))
              (buffer (current-buffer))
              (name (buffer-name)))
          (if (not (and filename (file-exists-p filename)))
              (ido-kill-buffer)
            (when (yes-or-no-p "Are you sure you want to delete this file? ")
              (delete-file filename t)
              (kill-buffer buffer)
              (message "File '%s' successfully removed" filename)))))

      (leader-def
        :infix "f"
        "" '(:ignore t :which-key "files")
        "s" 'save-buffer
        "f" 'counsel-find-file
        "r" 'counsel-recentf
        "R" 'jakemaks/rename-current-buffer-file
        "D" 'jakemaks/delete-current-buffer-file
        "v" '(:ignore t :which-key "local variables")
        "vf" 'add-file-local-variable
        "vp" 'add-file-local-variable-prop-line
        "vd" 'add-dir-local-variable)
    #+END_SRC

*** Help keys
  #+BEGIN_SRC emacs-lisp
    (leader-def
      :infix "h"
      "" '(:ignore t :which-key "help")
      "d" '(:ignore t :which-key "describe")
      "db" 'describe-bindings
      "dc" 'describe-char
      "df" 'describe-function
      "dk" 'describe-key
      "dp" 'describe-package
      "dt" 'describe-theme
      "dv" 'describe-variable
      "n" 'view-emacs-news)
  #+END_SRC

*** Buffers
   #+BEGIN_SRC emacs-lisp
     (defun jakemaks/kill-this-buffer (&optional arg)
       "Kill the current buffer.
     If the universal prefix argument is used then kill also the window."
       (interactive "P")
       (if (window-minibuffer-p)
           (abort-recursive-edit)
         (if (equal '(4) arg)
             (kill-buffer-and-window)
           (kill-buffer))))

     (defun jakemaks/switch-to-scratch-buffer ()
       "Switch to the `*scratch*' buffer. Create it first if needed."
       (interactive)
       (let ((exists (get-buffer "*scratch*")))
         (switch-to-buffer (get-buffer-create "*scratch*"))))

     (leader-def
       :infix "b"
       "" '(:ignore t :which-key "buffers")
       "b" 'buffer-menu
       "d" 'jakemaks/kill-this-buffer
       "n" 'next-buffer
       "p" 'previous-buffer
       "s" 'jakemaks/switch-to-scratch-buffer)
   #+END_SRC

* Misc.
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :functions (recentf-remove-if-non-kept)
      :defer 1)
    (use-package org
      :functions (org-element-type)
      :mode ("\\.org\\'" . org-mode))
  #+END_SRC
* Interface
** Command Completion
   =smart M-x= suggests =M-x= commands based on recency and frequency.
   I don't tend to use it directly but counsel uses it to order suggestions.
   #+BEGIN_SRC emacs-lisp
     (use-package smex
       :defer 4)
   #+END_SRC

   =ivy= is a generic completion framework which uses the minibuffer.
   Turning on =ivy-mode= enables replacement of lots of built in =ido=
   functionality.
   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :defer
       :diminish ivy-mode
       :config
       (ivy-mode t)
       :custom
       (ivy-initial-inputs-alist nil))
   #+END_SRC

   =counsel= is a collection of =ivy= enhanced versions of common Emacs
   commands. I haven't bound much as =ivy-mode= takes care of most things.
   #+BEGIN_SRC emacs-lisp
     (use-package counsel
       :diminish counsel-mode
       :commands (counsel-recent counsel-M-x)
       :bind (("M-x" . counsel-M-x))
       :general
       (general-nmap (general-chord "yy") 'counsel-yank-pop))
   #+END_SRC

   =swiper= is an =ivy= enhanced version of =isearch=.
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :bind (("M-s" . swiper)))
   #+END_SRC

   =hydra= presents menus for =ivy= commands.
   #+BEGIN_SRC emacs-lisp
     (use-package ivy-hydra
       :defer 4)
   #+END_SRC

** Discoverable keybindings
   =which-key= will suggest possible next keys.
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :diminish which-key-mode
       :config
       (add-hook 'after-init-hook 'which-key-mode))
   #+END_SRC

** Better undo
   =undo-tree= visualises undo history as a tree for easy navigation.
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :general
       (general-nmap (general-chord "uu") 'undo-tree-visualize)
       :diminish undo-tree-mode
       :config
       (global-undo-tree-mode 1))
   #+END_SRC

** Navigation
   One of the most important features of an advanced editor is quick
   text navigation. =avy= let's us jump to any character or line
   quickly.
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :general
       (general-nmap
         "C-j" 'avy-goto-char-2
         "C-l" 'avy-goto-line))
   #+END_SRC

   =ace-window= lets us navigate between windows in the same way as
   =avy=. Once activated it has useful sub-modes like =x= to switch into
   window deletion mode.
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :general
       (general-nmap "C-k" 'ace-window)
       :config
       (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
   #+END_SRC

** Easier selection

   =expand-region= expands the region around the cursor semantically
   depending on mode. Hard to describe but a killer feature.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :bind ("C-=" . er/expand-region))
   #+END_SRC

* Appearance
** Fonts
  Set a nice font.
  #+BEGIN_SRC emacs-lisp
    (when window-system
      (add-to-list 'default-frame-alist '(font . "Fira Code 14"))
      (set-face-attribute 'default nil :font "Fira Code 14"))
  #+END_SRC

  Set a preferred unicode font.
  #+BEGIN_SRC emacs-lisp
    (when window-system
      (set-fontset-font t 'unicode "STIXGeneral" nil 'prepend))
  #+END_SRC

  Display pretty symbols.
  #+BEGIN_SRC emacs-lisp
    (setq prettify-symbols-unprettify-at-point 'right-edge)
    (global-prettify-symbols-mode)
  #+END_SRC

** Modeline
   Use =spaceline= for a nice modeline.
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline-config
       :ensure spaceline
       :config
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state
             powerline-default-separator 'utf-8)
       (spaceline-emacs-theme))
   #+END_SRC

   Use =diminish= to keep the modeline clean.

* Programming
** Common Stuff
*** Misc. Improvements
    Highlight matching parentheses.
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC

    Help keep parentheses balanced.
    #+BEGIN_SRC emacs-lisp
      (use-package smartparens
          :diminish smartparens-mode
          :defer 2
          :config
          (add-hook 'prog-mode-hook 'smartparens-mode))
    #+END_SRC

    Reindent after every change.
    #+BEGIN_SRC emacs-lisp
      (use-package aggressive-indent
        :defer 2)
    #+END_SRC

    Automatically insert parentheses.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'electric-pair-mode)
    #+END_SRC

    Indentation at 2 spaces.
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
      (custom-set-variables
       '(tab-width 2)
       '(c-basic-offset 2))
    #+END_SRC
*** Git
    Magit is better than git at being git.
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :general
        (leader-def
          :infix "g"
          "" '(:ignore t :which-key "git")
          "s" 'magit-status))
    #+END_SRC

    Display line changes in gutter based on git history. Enable it everywhere.
    #+BEGIN_SRC emacs-lisp :tangle no
      (use-package git-gutter
        :config
        (global-git-gutter-mode 't)
        :diminish git-gutter-mode)
    #+END_SRC

    TimeMachine lets us step through the history of a file as recorded in git.

    #+BEGIN_SRC emacs-lisp
      (use-package git-timemachine)
    #+END_SRC

*** Syntax Checking
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :commands (flycheck-mode flycheck-define-checker)
        :config
        (add-hook 'after-init-hook 'global-flycheck-mode)
        ;; Define fringe indicator / warning levels
        (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
          (vector #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00011100
                  #b00111110
                  #b00111110
                  #b00111110
                  #b00011100
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000
                  #b00000000))
        (flycheck-define-error-level 'error
          :severity 2
          :overlay-category 'flycheck-error-overlay
          :fringe-bitmap 'flycheck-fringe-bitmap-ball
          :fringe-face 'flycheck-fringe-error)
        (flycheck-define-error-level 'warning
          :severity 1
          :overlay-category 'flycheck-warning-overlay
          :fringe-bitmap 'flycheck-fringe-bitmap-ball
          :fringe-face 'flycheck-fringe-warning)
        (flycheck-define-error-level 'info
          :severity 0
          :overlay-category 'flycheck-info-overlay
          :fringe-bitmap 'flycheck-fringe-bitmap-ball
          :fringe-face 'flycheck-fringe-info)

        (defun jakemaks/toggle-flycheck-error-list ()
          "Toggle flycheck's error list window.
                 If the error list is visible, hide it.  Otherwise, show it."
          (interactive)
          (-if-let (window (flycheck-get-error-list-window))
              (quit-window nil window)
            (flycheck-list-errors)))

        (defun jakemaks/goto-flycheck-error-list ()
          "Open and go to the error list buffer."
          (interactive)
          (unless (get-buffer-window (get-buffer flycheck-error-list-buffer))
            (flycheck-list-errors)
            (switch-to-buffer-other-window flycheck-error-list-buffer)))


        (leader-def
          :states '(normal)
          :infix "e"
          "" '(:ignore t :which-key "errors")
          "c" 'flycheck-clear
          "h" 'flycheck-describe-checker
          "l" 'jakemaks/toggle-flycheck-error-list
          "L" 'jakemaks/goto-flycheck-error-list
          "e" 'flycheck-explain-error-at-point
          "s" 'flycheck-select-checker
          "S" 'flycheck-set-checker-executable
          "v" 'flycheck-verify-setup
          ))
    #+END_SRC

*** Autocomplete
    Use =company= for autocompletion.
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :diminish (company-mode company-search-mode)
        :config
        (add-hook 'after-init-hook 'global-company-mode)
        :custom
        (company-idle-delay t))
    #+END_SRC

*** Snippets
    Use =yasnippet= for snippets.
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :diminish yas-minor-mode
        :commands (yas-hippie-try-expand)
        :config
        (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
        (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
        (yas-global-mode)
        (global-set-key (kbd "M-/") 'company-yasnippet))
    #+END_SRC

** Emacs Lisp
** Java
   There are a few options for Java development in Emacs, but most rely on integration with an external IDE like Eclipse. In contact, =meghanada= is a nice, relatively minimal setup. =maven-test-mode= is a convenient way to run individual tests rather than passing detailed arguments to =mvn=.
   #+BEGIN_SRC emacs-lisp
     (use-package cl-lib)
     (use-package yasnippet)
     (use-package meghanada
       :commands meghanada-mode
       )
     (use-package javadoc-lookup)

     (add-hook 'java-mode-hook 'meghanada-mode)
     (add-hook 'java-mode-hook 'flycheck-mode)
   #+END_SRC

** Markdown

   Markdown support isn't built into Emacs, add it with =markdown-mode=.
   #+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
   #+END_SRC
** Coq
   #+BEGIN_SRC emacs-lisp
     (defvar proof-general-load-path "~/.nix-profile/share/emacs/site-lisp/ProofGeneral/generic")

     (use-package proof-site
       :load-path proof-general-load-path
       :mode ("\\.v\\'" . coq-mode))

     (use-package company-coq
       :commands 'company-coq-initialize
       :config
       (add-hook 'coq-mode-hook 'company-coq-mode)
       (custom-set-faces
        '(proof-eager-annotation-face ((t (:background "medium blue"))))
        '(proof-error-face ((t (:background "dark red"))))
        '(proof-warning-face ((t (:background "indianred3")))))
       :general
       (general-nmap
        :keymaps 'coq-mode-map
        :prefix ","
        "n" 'proof-assert-next-command-interactive
        "]" 'proof-assert-next-command-interactive
        "u" 'proof-undo-last-successful-command
        "[" 'proof-undo-last-successful-command
        "h" 'company-coq-doc
        "ll" 'proof-layout-windows
        "lp" 'proof-prf
        "x" 'proof-shell-exit
        "s" 'proof-find-theorems
        "?" 'coq-Check
        "p" 'coq-Print
        ";" 'pg-insert-last-output-as-comment
        "o" 'company-coq-occur
        "." 'proof-goto-point)
       :custom
       (proof-three-window-mode-policy 'hybrid))
   #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp
    (custom-set-variables
     '(org-src-fontify-natively t)
     '(org-src-tab-acts-nativelyt)
     '(org-src-window-setup 'current-window))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (defconst help/org-special-pre "^\s*#[+]")
    (defun help/org-2every-src-block (fn)
      "Visit every Source-Block and evaluate `FN'."
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (let ((case-fold-search t))
          (while (re-search-forward (concat help/org-special-pre "BEGIN_SRC") nil t)
            (let ((element (org-element-at-point)))
              (when (eq (org-element-type element) 'src-block)
                (funcall fn element)))))
        (save-buffer)))

    ;;(help/org-2every-src-block 'org-babel-remove-result)
  #+END_SRC

  Improve display of bullet points.
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :config
      (setq org-bullets-bullet-list '("∙"))
      (add-hook 'org-mode-hook 'org-bullets-mode))
  #+END_SRC

  Customize appearance.

  #+BEGIN_SRC emacs-lisp
    (when window-system
      (let*
          ((variable-tuple (cond
                            ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                            ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                            ((x-list-fonts "Verdana")         '(:font "Verdana"))
                            ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                            (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
           (base-font-color     (face-foreground 'default nil 'default))
           (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

        (custom-theme-set-faces 'user
                                `(org-level-8 ((t (,@headline ,@variable-tuple))))
                                `(org-level-7 ((t (,@headline ,@variable-tuple))))
                                `(org-level-6 ((t (,@headline ,@variable-tuple))))
                                `(org-level-5 ((t (,@headline ,@variable-tuple))))
                                `(org-level-4 ((t (,@headline ,@variable-tuple))))
                                `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.33))))
                                `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.33))))
                                `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.33))))
                                `(org-document-title ((t (,@headline ,@variable-tuple :height 1.33 :underline nil)))))))
  #+END_SRC

* Mac OS
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
      (custom-set-variables
       '(mac-pass-command-to-system nil)
       '(mac-pass-control-to-system nil)
       '(locate-command "mdfind")
       '(delete-by-moving-to-trash t)))
  #+END_SRC

* Debug

  Debug on all errors.
  #+BEGIN_SRC emacs-lisp
    (setq debug-on-error 't)
  #+END_SRC

  Profile startup with =esup=.
  #+BEGIN_SRC emacs-lisp :tangle no
    (use-package esup)
  #+END_SRC
* Cleanup

  Make garbage collection pauses faster by decreasing the threshold
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold
          (car (get 'gc-cons-threshold 'standard-value)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
   (provide 'config)
  #+END_SRC
